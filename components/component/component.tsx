/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/42ixCM4ciJp
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */
"use client";
import React, { useState, Dispatch, SetStateAction } from 'react';

type Image = {
  src: string;
  caption: string;
};

type ImageUploadProps = {
  images: Image[];
  setImages: Dispatch<SetStateAction<Image[]>>;
  setCaptionsGenerated: Dispatch<SetStateAction<boolean>>;
};

const generateCaptions = async (images: Image[]) => {
  const updatedImages = await Promise.all(
    images.map(async (image) => {
      const input = {
        image: image.src,
        prompt: "Generate a caption for this image."
      };

      try {
        const response = await fetch('/api/generate-caption', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ input }),
        });

        if (!response.ok) {
          throw new Error('Failed to generate caption');
        }
        const data = await response.json();
        console.log(data);
        return { ...image, caption:data.caption.join(' ').trim()  };
      } catch (error) {
        console.error('Error:', error);
        return { ...image, caption: 'Failed to generate caption' };
      }
    })
  );
  return updatedImages;
};

function ImageUpload({ images, setImages, setCaptionsGenerated }: ImageUploadProps) {
  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (files) {
      const uploadedImages = Array.from(files).map((file) => ({
        src: URL.createObjectURL(file),
        caption: `Auto-generated caption for ${file.name}`,
      }));
      setImages(uploadedImages);
      setCaptionsGenerated(false); // Reset captions generated state
    }
  };

  const handleGenerateCaptions = async () => {
    const updatedImages = await generateCaptions(images);
    setImages(updatedImages);
    setCaptionsGenerated(true);
  };

  return (
    <div className="w-full p-6 border-4 border-dashed border-[#f7a8f7] rounded-2xl">
      <div className="grid grid-cols-1 gap-4">
        <div>
          <input
            type="file"
            className="w-full bg-[#f7a8f7] text-[#4b1b4b] rounded-md p-2"
            multiple
            onChange={handleFileUpload}
          />
        </div>
      </div>
      <div className="mt-4">
        <button className="w-full px-6 py-3 text-[#f7a8f7] bg-[#4b1b4b] rounded-2xl font-bold" onClick={handleGenerateCaptions}>
          Generate Captions
        </button>
      </div>
    </div>
  );
}

function ImageCaptioningEdit({ images }: { images: Image[] }) {
  return (
    <div className="w-full space-y-6">
      {images.map((image, index) => (
        <div key={index} className="flex items-start p-6 bg-[#f7a8f7] border-4 border-[#4b1b4b] rounded-2xl">
          <img src={image.src} alt="Uploaded" className="w-36 h-36 mr-6 rounded-full" />
          <textarea
            className="w-full p-4 bg-[#80c8f8] border-4 border-[#4b1b4b] rounded-md text-[#4b1b4b]"
            defaultValue={image.caption}
          />
        </div>
      ))}
    </div>
  );
}

function FinalTrainButton({ captionsGenerated }: { captionsGenerated: boolean }) {
  return (
    <button
      className="w-full px-6 py-3 text-[#f7a8f7] bg-[#4b1b4b] rounded-2xl font-bold"
      disabled={!captionsGenerated}
    >
      Start Training
    </button>
  );
}

export function Component() {
  const [images, setImages] = useState<Image[]>([]);
  const [captionsGenerated, setCaptionsGenerated] = useState(false);

  return (
    <div className="flex flex-col items-center w-full max-w-4xl p-6 mx-auto space-y-8 bg-[#80c8f8] border-4 border-[#f7a8f7] rounded-3xl shadow-2xl">
      <h1 className="text-4xl font-bold text-[#4b1b4b]">Image Caption Interface</h1>
      <ImageUpload images={images} setImages={setImages} setCaptionsGenerated={setCaptionsGenerated} />
      <ImageCaptioningEdit images={images} />
      <FinalTrainButton captionsGenerated={captionsGenerated} />
    </div>
  );
}